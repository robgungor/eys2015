package{	import com.oddcast.utils.Method_Sequence_Manager;	import com.oddcast.utils.gateway.Gateway;	import com.oddcast.utils.gateway.Gateway_Request;	import com.oddcast.workshop.Callback_Struct;		import flash.display.Loader;	import flash.display.Sprite;	import flash.events.Event;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext; 	import flash.system.Security;	import flash.system.System;	import flash.text.TextField;		[SWF(		width="640",					// Stage width		height="360",					// Stage height//		usePreloader="true"				// Specifies whether to disable the application preloader (false) or not (true). The default value is true. To use the default preloader, your application must be at least 160 pixels wide.//		preloader="path"				// Specifies the path of a SWC component class or ActionScript component class that defines a custom progress bar.//		widthPercent="#",				// //		heightPercent="#",				// //		scriptRecursionLimit="#",		// Specifies the maximum depth of the Flash Player or AIR call stack before Flash Player or AIR stops. This is essentially the stack overflow limit.  The default value is 1000.//		scriptTimeLimit="#",			// Specifies the maximum duration, in seconds, that an ActionScript event listener can execute before Flash Player or AIR assumes that it has stopped processing and aborts it.  The default value is 60 seconds, which is also the maximum allowable value that you can set.		backgroundColor="#ffffff",		// background color of the 		frameRate="24"					// Specifies the frame rate of the application, in frames per second. The default value is 24.	)]		public class Main_Video_Shell extends Sprite	{		private var config_xml:XML;		private var player_filename:String;		private var tf_log:TextField;				public function Main_Video_Shell()		{			init_log();			log('constructor');			Security.allowDomain('*');			if (stage) init();			else addEventListener(Event.ADDED_TO_STAGE, init);		}		private function init(_e:Event=null):void		{			removeEventListener(Event.ADDED_TO_STAGE,init);						var msm:Method_Sequence_Manager = new Method_Sequence_Manager( sequence_fin );			msm.register_sequence( load_local_config, 	[parse_local_config] );			msm.register_sequence( parse_local_config, 	[load_body_player] );			log('starting sequence');			msm.start_sequence();						function sequence_fin():void			{				log('sequence finished');			}		}				/**		 * 		 * 		 * 		 * 		 * 		 * 		 * 		 * 		 * ********************** SEQUENCES **/		private function load_local_config( _continue:Function, _key:Function ):void		{			var url:String = 'config.xml';			log('loading config : '+url);			Gateway.retrieve_XML( url, new Callback_Struct( fin, null, error ) );			function fin( _content:XML ) : void			{				log('config loaded');				config_xml = _content;				_continue(_key);			}			function error( _msg:String ) : void 			{				log('error loading config');			}		}		private function parse_local_config( _continue:Function, _key:Function ):void		{			player_filename = config_xml.@PLAYER_FILENAME;			log('player filename : '+player_filename);			_continue(_key);		}		private function load_body_player( _continue:Function, _key:Function ):void		{			var url:String = player_filename//+"&"+;			log('loading player');			var lc:LoaderContext = new LoaderContext(false,new ApplicationDomain());			//var stem:String = config_xml.@STEM;			//var mid:String = config_xml.@MID;			//lc.parameters = {"stem":stem, "mId":mid};			Gateway.retrieve_Loader(new Gateway_Request( url, new Callback_Struct( fin, progress, error ),0,lc) );			function fin( _content:Loader ) : void			{				log('player loaded');				addChild(_content);				_continue(_key);			}			function progress(percent:Number):void			{				log('player loading: '+percent);			}			function error( _msg:String ) : void 			{				log('error loading player');			}		}		/*************************************		 * 		 * 		 * 		 * 		 * 		 * 		 * 		 * 		 * 		 * 		 * 		 * ********************** LOG **/		private function init_log():void		{			tf_log = new TextField();			tf_log.multiline = true;			tf_log.wordWrap = false;			tf_log.selectable = true;			tf_log.width = 300;			tf_log.height = 400;			addChild(tf_log);		}		private function log(_msg:String):void		{			tf_log.text = _msg + '\n' + tf_log.text;		}	}}