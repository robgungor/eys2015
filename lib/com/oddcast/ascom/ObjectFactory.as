package com.oddcast.ascom{	import com.oddcast.oc3d.content.*;	import com.oddcast.oc3d.core.*;	import com.oddcast.oc3d.external.*;	import com.oddcast.oc3d.shared.*;		import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.utils.describeType;		public class ObjectFactory extends Sprite	{		private var domain_:ApplicationDomain;				private static function contains(str:String, search:String):Boolean { return (str == null) ? false : (str.indexOf(search, 0) != -1); }		private static function split(str:String, pivot:String):Array{ var index:int = str.indexOf(pivot); return (index == -1) ? [str, ""] : [str.substr(0, index), str.substr(index + pivot.length, str.length - (index + pivot.length))]; }		private static function rsplit(str:String, pivot:String):Array{ var index:int = str.lastIndexOf(pivot); return (index == -1) ? ["", str] : [str.substr(0, index), str.substr(index + pivot.length, str.length - (index + pivot.length))]; }				private function setDomain(domain:ApplicationDomain):void { domain_ = domain; }		public function domain():ApplicationDomain { return domain_; }			// continuationFn<ObjectFactory>		public static function load(url:String, domain:ApplicationDomain, continuationFn:Function=null, failedFn:Function=null, progressedFn:Function=null):void		{			// BEGIN SHARED INTERFACE DECLARATIONS (any interfaces that are shared between swf boundaries must be declared here)			DummyPropertyBagExchanger.init()			DummyRenderer.init();			DummyPicker.init();			DummyPropertyBag.init();			DummyAugmentedRealityPlugIn.init();			DummyKLT.init();			// END SHARED INTERFACE DECLARATIONS			var loadedFn:Function = function(e:Event):void			{				trace("Loaded Plug-in: \"" + e.target.url + "\"");								var className:String = contains(url, "\\") ? 					(String(split(rsplit(url, "\\")[1], ".")[0])) :					(String(split(rsplit(url, "/")[1], ".")[0]));									var hasDef:Boolean = true;								if (!domain.hasDefinition(className))				{					if (!contains(className, "_original") && !domain.hasDefinition(className + "_original"))					{						hasDef = false;						if (failedFn != null)							failedFn("ObjectFactory \"" + className + "\" not found");					}					else if (contains(className, "_original"))						className = rsplit(className, "_")[0];					else						className += "_original";				}								if (hasDef)				{					var FactoryType:Class = Class(domain.getDefinition(className));					if (FactoryType == null)					{						failedFn("ObjectFactory \"" + FactoryType + "\" not found");						return;					}										if (continuationFn != null)					{						var result:ObjectFactory = new FactoryType();						result.setDomain(domain);						result.onContinue(domain, function():void						{							continuationFn(result);						});					}				}			};						var loadFn:Function = function():void			{				var loader:Loader = new Loader();				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(e:Event):void				{					loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, arguments.callee); 					loadedFn(e);				});								if (failedFn != null)					loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, function(e:IOErrorEvent):void					{						trace("failed to load \"" + url + "\"");						if (failedFn != null)							failedFn("url \"" + url + "\" not found - " + e.toString());						loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, arguments.callee); 					});									if (progressedFn != null)					loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, function(e:ProgressEvent):void					{						progressedFn(e.bytesLoaded, e.bytesTotal);											}, false, 0, true);								var context:LoaderContext = new LoaderContext();				//context.applicationDomain = ApplicationDomain.currentDomain;				context.applicationDomain = domain;				//trace("trying to load \"" + url + "\"");				trace("Loading Plug-in: \"" + url + "\"");				loader.load(new URLRequest(url), context);			};						loadFn();		}				protected function onContinue(domain:ApplicationDomain, continuationFn:Function):void		{			continuationFn(domain);		}		public function createObject(objectName:String, version:uint, params:Array):Object		{			var result:Object = onCreateObject(objectName, version, domain_, params);			if (result == null)				throw new Error("unknown object name - \"" + objectName + "\" of version " + version);			return result;		}				protected function onCreateObject(objectName:String, version:uint, domain:ApplicationDomain, params:Array):Object { return null; }	}}import com.oddcast.oc3d.core.ICameraObject3D;import com.oddcast.oc3d.core.IDisplayObject3D;import com.oddcast.oc3d.core.IViewport3D;import com.oddcast.oc3d.external.*;import flash.display.BitmapData;import flash.display.Sprite;import flash.geom.Point;import flash.geom.Rectangle;
class DummyPropertyBag implements IPropertyBag{	public static function init():void {}	public function tryGetProperty(name:String):* { return null; }	public function registerPropertyWatcher(name:String, changedFn:Function):void {}	public function unregisterPropertyWatcher(name:String, changedFn:Function):void {}}class DummyRenderer implements IRenderer{	public static function init():void {}	public function zoom():Number{ return 0; }	public function currentSprite():Sprite{ return null; }	public function addToRenderList(screenDepthAndRenderCallbackObj:Object):void{ }}class DummyPicker implements IPicker{	public static function init():void {}	public function calculateLowestZ(viewPos:Point):Number{ return Number.MAX_VALUE }	public function pick():void {}}class DummyKLT implements IKLTPlugIn{	public static function init():void {}	public function dispose():void {}	public function compute(data:BitmapData):void {}	public function trackRegion(r:Rectangle, featureCount:uint=20, minimumDistance:uint=8, debugColor:uint=0x00ff99):uint { return 0; }	public function disposeRegion(markerId:uint):void {}	public function setMarkerAddedCallback(fn:Function):void {} // fn:Function<patternId:int>	public function setMarkerUpdatedCallback(fn:Function):void {} // fn:Function<patternId:int, x:Number, y:Number, rotation:Number, scaler:Number>	public function setMarkerRemovedCallback(fn:Function):void {} // fn:Function<patternId:int>	public function setOverlay(overlay:Sprite):void {}	public function setWindowSize(width:uint=8, height:uint=8):void {}	public function windowSize():Point { return null; } 	public function setIterationCount(n:uint=10):void {}	public function iterationCount():uint { return 0; }	public function setIsRansacEnabled(b:Boolean):void {}	public function isRansacEnabled():Boolean { return false; }	public function setRansacParameters(threshold:Number=10, iterations:uint=10, minRequiredSamples:uint=5, numOfConsentsTillGoodEnuff:uint=10):void {}	public function ransacParameters():Array { return null; }}